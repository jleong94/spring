name: Build & Release Spring Boot App  # Name of your GitHub Action workflow (you’ll see this on GitHub Actions tab)

on:
  push:
    branches: ["main", "master"]     # Triggers when someone pushes code to 'main' or 'master' branch

permissions:
  contents: write
  pull-requests: write  # 👈 Add this line
  
jobs:
  build:
    if: github.ref_name == 'main' || github.ref_name == 'master' # Only run this job if the branch is main or master
    runs-on: ubuntu-latest             # This workflow runs in a fresh Ubuntu VM (GitHub-hosted)

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4        # Pulls your latest code into the VM so it can build it

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'        # Uses Eclipse Temurin JDK
        java-version: '21'             # Set your desired Java version here

    - name: Set UAT Environment Variables # Use vars.* if config is in repository variable, else use secrets.*
      run: |
        echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
        echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> $GITHUB_ENV
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> $GITHUB_ENV
        echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> $GITHUB_ENV
        echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> $GITHUB_ENV
        echo "SMTP_MAIL=${{ secrets.SMTP_MAIL }}" >> $GITHUB_ENV

    - name: Build with Maven
      run: |
        mvn clean package  # Builds the JAR file  
        ORIGINAL_JAR=$(ls target/*.jar | grep -v 'original' | head -n 1)
        BASE_NAME=$(basename "$ORIGINAL_JAR" | sed -E 's/-[0-9]+.*\.jar//')
        VERSIONED_JAR="target/${BASE_NAME}-${{ env.RELEASE_TAG }}.jar"
        echo "Renaming $ORIGINAL_JAR to $VERSIONED_JAR"
        mv "$ORIGINAL_JAR" "$VERSIONED_JAR"
        # Export for use in later steps
        echo "VERSIONED_JAR_NAME=$(basename $VERSIONED_JAR)" >> $GITHUB_ENV

    - name: Create Incremental Version Tag
      id: tagger
      run: |
       git fetch --tags  # 👈 fetch remote tags to ensure local is synced
       LAST_TAG=$(git tag --list 'v0.*' | sort -V | tail -n 1)
       echo "Last tag found: $LAST_TAG"
       if [[ -z "$LAST_TAG" ]]; then
        LAST_TAG="v0.0" #Default if no tag exists
       fi
       # Extract the numeric part, increment
       LAST_MINOR=${LAST_TAG#v0.} # Remove 'v0.' prefix to get minor version
       NEXT_MINOR=$((LAST_MINOR + 1)) # Increment the version number
       NEW_TAG="v0.${NEXT_MINOR}" # Form the new tag
       echo "New tag: $NEW_TAG"
       git tag "$NEW_TAG" # Create new Git tag
       git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git --tags # Push tag to remote
       echo "RELEASE_TAG=$NEW_TAG" >> $GITHUB_ENV # Save tag to environment for later use

    - name: Upload JAR as GitHub Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}   # ← Use the generated tag
        files: target/${{ env.VERSIONED_JAR_NAME }} # Uploads the JAR file from Maven's output to the GitHub "Releases" section
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required auth to make the release

    - name: Get the latest release URL
      id: get_release
      run: |
        echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/download/${{ env.RELEASE_TAG }}/${{ env.VERSIONED_JAR_NAME }}" >> $GITHUB_ENV
        # Builds the actual download link to your new JAR and stores it in environment variable RELEASE_URL

    - name: Install GitHub CLI
      run: sudo apt-get install gh -y # Installs GitHub CLI to interact with GitHub programmatically

    - name: Update README with JAR link
      run: |
       git checkout master # Make sure we are on master branch
       sed -i "s|Download latest build:.*|Download latest build: [Download Latest Build]('${RELEASE_URL}')|" README.md # Replace line with new JAR link
       git config --global user.name 'github-actions[bot]' # Set commit username
       git config --global user.email 'github-actions[bot]@users.noreply.github.com' # Set commit email
       git add README.md # Stage README changes
       # Only commit if there are staged changes
       if git diff --cached --quiet; then
         echo "No changes to commit." # Skip commit if nothing changed
       else	   
         git commit -m "Update README with latest JAR link for ${{ env.RELEASE_TAG }}" # Commit with message
         git push origin master # Push README changes back to master
       fi
      env:
        #In github, click profile pic->setting->developer setting->personal access token->token(classic)
        #Tick repo & workflow
        #Go to target repository->setting->secrets and variables->actions
        #Add secret at repository secret section. The name put, GH_PAT
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
