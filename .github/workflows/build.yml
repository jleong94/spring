name: Build & Release Spring Boot App  # Name of your GitHub Action workflow (you’ll see this on GitHub Actions tab)

on:
  push:
    branches: ["main", "master"]     # Triggers when someone pushes code to 'main' or 'master' branch

permissions:
  contents: write
  pull-requests: write  # 👈 Add this line
  
jobs:
  build:
    if: github.ref_name == 'main' || github.ref_name == 'master'
    runs-on: ubuntu-latest             # This workflow runs in a fresh Ubuntu VM (GitHub-hosted)

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4        # Pulls your latest code into the VM so it can build it

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'        # Uses Eclipse Temurin JDK
        java-version: '21'             # Set your desired Java version here

    - name: Build with Maven
      run: mvn clean package  # Builds the JAR file
    
    - name: Create Incremental Version Tag
      id: tagger
      run: |
       git fetch --tags  # 👈 fetch remote tags to ensure local is synced
       LAST_TAG=$(git tag --list 'v0.*' | sort -V | tail -n 1)
       echo "Last tag found: $LAST_TAG"
       if [[ -z "$LAST_TAG" ]]; then
        LAST_TAG="v0.0"
       fi
       # Extract the numeric part, increment
       LAST_MINOR=${LAST_TAG#v0.}
       NEXT_MINOR=$((LAST_MINOR + 1))
       NEW_TAG="v0.${NEXT_MINOR}"
       echo "New tag: $NEW_TAG"
       git tag "$NEW_TAG"
       git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git --tags
       echo "RELEASE_TAG=$NEW_TAG" >> $GITHUB_ENV      	   	   	  	  	
    - name: Upload JAR as GitHub Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}   # ← Use the generated tag
        files: target/*.jar            # Uploads the JAR file from Maven's output to the GitHub "Releases" section
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required auth to make the release

    - name: Get the latest release URL
      id: get_release
      run: |
        echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/latest/download/$(ls target/*.jar | xargs -n 1 basename)" >> $GITHUB_ENV
        # Builds the actual download link to your new JAR and stores it in environment variable RELEASE_URL

    - name: Install GitHub CLI
      run: sudo apt-get install gh -y

    - name: Update README with JAR link
      run: |
       git checkout master
       sed -i '/Download latest build:/c\Download latest build: [Click here]('${RELEASE_URL}')' README.md
       git config --global user.name 'github-actions[bot]'
       git config --global user.email 'github-actions[bot]@users.noreply.github.com'
       git add README.md
       # Only commit if there are staged changes
       if git diff --cached --quiet; then
         echo "No changes to commit."
       else	   
         git commit -m "Update README with latest JAR link for ${{ env.RELEASE_TAG }}"
         git push origin master
       fi
      env:
        #In github, click profile pic->setting->developer setting->personal access token->token(classic)
        #Tick repo & workflow
        #Go to target repository->setting->secrets and variables->actions
        #Add secret at repository secret section. The name put, GH_PAT
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
